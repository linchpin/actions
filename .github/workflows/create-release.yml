name: Create Release

on:
  workflow_call:
    inputs:
      themes: # A JSON formatted array of theme folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-mmxxii"]'
        default: '["none"]'
        required: false
        type: string
      plugins: # A JSON formatted array of plugins folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-functionality"]'
        default: '["none"]'
        required: false
        type: string
      php_version:
        description: 'PHP version used during build (Default 7.4.x)'
        default: 7.4
        required: false
        type: number
      node_version:
        description: 'Node version used during build (Default 14.x)'
        default: 14
        required: false
        type: number
      skip_create_release:
        description: 'If we only need our release built for staging, we can skip creating an official github release'
        default: false
        required: false
        type: boolean
    secrets:
      packagist_auth:
        description: 'Authentication for private satis/packagist'
        required: true
      bot_token:
        description: 'Override Bot Token'
        required: false

jobs:
  dependency_setup:
    name: Composer Dependency Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: 'build'

      - name: Authenticate Packagist
        run: echo '${{ secrets.packagist_auth }}' > ./build/auth.json

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Composer Install
        uses: php-actions/composer@v6
        with:
          working_dir: ./build
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Remove Packagist Authentication
        run: rm -f ./build/auth.json

      - name: Compress Composer Artifact
        id: composer_compression_artifact
        run: |
          tar -zcf composer.tar.gz ./build

      - name: Upload Dependencies
        uses: actions/upload-artifact@v3
        with:
          path: composer.tar.gz
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

  theme_setup:
    name: Build WordPress Theme(s)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        theme: ${{ fromJSON( inputs.themes ) }}
    steps:
      - name: Theme Setup
        id: individal_theme
        if: ${{ matrix.theme == 'none' }}
        run: |
          echo "::warning::Skipping Theme Build"

      - name: Checkout code
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/checkout@v3

      - name: Setup Node.js
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get yarn cache directory path
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn Dependencies
        uses: actions/cache@v3
        id: cache-yarn-cache
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Theme
        id: build-theme
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        run: |
          cd themes/${{ matrix.theme }}
          yarn install # @todo this should not include dev resources
          yarn build

      - name: Compress Theme Artifact
        id: compress_theme_artifact
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        run: |
          tar -zcf theme-${{ matrix.theme }}.tar.gz --exclude "node_modules" themes/${{ matrix.theme }}

      - name: Upload Theme
        uses: actions/upload-artifact@v3
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        with:
          path: theme-${{ matrix.theme }}.tar.gz
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

  # Loop through all plugins passed from inputs.plugins
  plugin_setup:
    name: Plugin(s)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJSON( inputs.plugins ) }}
    steps:
      # check if we have a theme to build. If None output and skip the rest of the steps.
      - name: Plugin Setup
        id: individual_plugin
        if: ${{ matrix.plugin == 'none' }}
        run: |
          echo "::warning::Skipping Plugin Build"

      - name: Checkout code
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/checkout@v3

      - name: Setup Node.js
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/setup-node@v3.3.0
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get yarn cache directory path
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Plugin
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        id: build-plugin
        run: |
          cd plugins/${{ matrix.plugin }}
          yarn install # @todo exclude dev libraries (make initial non cached build faster)
          yarn build

      - name: Compress Plugin Artifact
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        id: compress_plugin_artifact
        run: |
          tar -zcf plugin-${{ matrix.plugin }}.tar.gz --exclude "node_modules" plugin/${{ matrix.plugin }}

      - name: Upload Plugin
        if: ${{ matrix.plugin != 'none' }} # skip this step if no themes are included.
        uses: actions/upload-artifact@v3
        with:
          path: plugin-${{ matrix.plugin }}.tar.gz

  build:
    name: Build Release Zip
    runs-on: ubuntu-latest
    needs: [dependency_setup,theme_setup,plugin_setup]
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./
      - name: Decompress Composer Artifacts
        id: decompress_composer_artifacts
        run: |
          tar -xzf ./artifact/composer.tar.gz -C ./
      - name: Decompress Theme Artifacts
        if: ${{ inputs.themes != '["none"]' }} # skip this step if no themes are included.
        id: decompress_theme_artifacts
        run: |
          cd ./artifact
          cat theme-*.tar.gz | tar -xzf - -i -C ../build/
          cd ../
          
      - name: Decompress Plugin Artifacts
        if: ${{ inputs.plugins != '["none"]' }} # skip this step if no themes are included.
        id: decompress_plugin_artifacts
        run: |
          cd ./artifact
          cat plugin-*.tar.gz | tar -xzf - -i -C ../build/
          cd ../
     
      - name: Clean Build Files/Folders
        id: clean_build_ff
        run: |
          mkdir -p ./build/.deployment/
          cd ./build/.deployment/
          wget -O cleanup.sh https://raw.githubusercontent.com/linchpin/actions/main/.deployment/cleanup.sh
          chmod +x ./cleanup.sh
          sh ./cleanup.sh
          cd ../../
          rm -rf ./build/.deployment/
      - name: Get Current Version
        id: version
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}
      # Latest changelog entry is based on version. If not found, fall back to the last version
      - name: Get Latest CHANGELOG.md Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ steps.version.current }}
          path: ./build/CHANGELOG.md

      - name: Combine Assets for Release
        id: compression
        run: |
          zip -r release.zip ./temp_archive

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release.zip
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

      - name: Create Release
        id: create_release
        if: ${{ ! inputs.skip_github_release }}
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          generate_release_notes: true
          body: |
            ${{ steps.changelog_reader.outputs.changes }}
          draft: false
          prerelease: false
          files: release.zip
