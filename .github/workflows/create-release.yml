name: Create Release

on:
  workflow_call:
    inputs:
      themes: # A JSON formatted array of theme folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-mmxxii"]'
        default: '["none"]'
        required: false
        type: string
      plugins: # A JSON formatted array of plugins folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-functionality"]'
        default: '["none"]'
        required: false
        type: string
      php_version:
        description: "PHP version used during build (Default 8.0.x)"
        default: '8.0'
        required: false
        type: string
      node_version:
        description: "Node version used during build (Default 20.x)"
        default: '20'
        required: false
        type: string
      skip_create_release:
        description: "If we only need our release built for staging, we can skip creating an official github release"
        default: false
        required: false
        type: boolean
      theme_composer_install:
        description: "Run composer install on the theme level"
        default: false
        required: false
        type: boolean
      composer_install:
        description: "Run composer install on the project level to install plugins"
        default: false
        required: false
        type: boolean
      plugin_composer_install:
        description: "Run composer install on the functionality plugin"
        default: false
        required: false
        type: boolean
      build_theme_js:
        description: "Build the theme JS"
        default: false
        required: false
        type: boolean
      skip_github_release:
        description: "Skip creating a GitHub release"
        default: false
        required: false
        type: boolean

jobs:
  dependency_setup:
    name: Composer Dependency Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: "build"

      - name: Authenticate Packagist
        run: echo '${{ secrets.PACKAGIST_COMPOSER_AUTH_JSON }}' > ./build/auth.json

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Composer Install
        uses: php-actions/composer@v6
        with:
          working_dir: ./build
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Remove Packagist Authentication
        run: rm -f ./build/auth.json

      - name: Upload Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: composer
          path: |
            ./build/
            !./build/**/node_modules
          retention-days: 1 # since we keep a release we do not need to store an artifact too long
          overwrite: true
          include-hidden-files: true
          compression-level: 8

  theme_setup:
    name: Build WordPress Theme(s)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        theme: ${{ fromJSON( inputs.themes ) }}
    steps:
      - name: Theme Setup Confirmation
        id: theme-setup-confirmation
        if: ${{ matrix.theme == 'none' }}
        run: |
          echo "::warning::Skipping Theme Build, no theme defined"

      - name: Composer Update for ${{ matrix.theme }} theme
        id: theme-composer-update
        # Make sure we have a theme, the theme uses composer and the composer.lock exists
        if: ${{ matrix.theme != 'none' && inputs.theme_composer_install && hashFiles(format('themes/{0}/composer.lock', matrix.theme))  }} # skip this step if no themes are included.
        run: composer update --working-dir=themes/${{ matrix.theme }}

      - name: Setup Node for ${{ matrix.theme }} theme
        id: theme-node-setup
        # Make sure we have a theme, the theme uses npm and the package-lock.json exists
        if: ${{ matrix.theme != 'none' && hashFiles(format('themes/{0}/package-lock.json', matrix.theme)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: themes/${{ matrix.theme }}/package-lock.json

      - name: Build WordPress Theme (${{ matrix.theme }}) using npm
        if: ${{ matrix.theme != 'none' && inputs.build_theme_js != 'false' && hashFiles( 'themes/${{ matrix.theme }}/package-lock.json' ) != '' }}
        id: build-theme-npm
        run: |
          cd themes/${{ matrix.theme }}
          npm config set cache $(npm config get cache)
          npm install --production
          npm run build
          rm -rf node_modules

      - name: Upload WordPress Theme (${{ matrix.theme }}) Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        with:
          path: |
            themes/${{ matrix.theme }}/
            !themes/${{ matrix.theme }}/**/node_modules
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

  # Loop through all plugins passed from inputs.plugins
  plugin_setup:
    name: WordPress Plugin(s) Setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJSON( inputs.plugins ) }}
    steps:
      # check if we have a plugin to build. If None output and skip the rest of the steps.
      - name: Plugin Setup Confirmation
        id: individual_plugin
        if: ${{ matrix.plugin == 'none' }}
        run: |
          echo "::warning::Skipping Plugin Build, no plugin defined"

      - name: Composer Update for ${{ matrix.plugin }} plugin
        id: composer-plugin-update
        # Make sure we have a plugin, the plugin uses composer and the composer.json exists
        if: ${{ matrix.plugin != 'none' && inputs.plugin_composer_install && hashFiles( 'plugins/${{ matrix.plugin }}composer.json ' ) != '' }} # skip this step if no themes are included.
        run: composer update --working-dir=plugins/${{ matrix.plugin }}

      - name: Setup Node for ${{ matrix.plugin }} WordPress plugin
        if: ${{ matrix.plugin != 'none' && hashFiles( 'themes/${{ matrix.theme }}/package-lock.json' ) != '' }} # skip this step if no themes are included.
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: themes/${{ matrix.plugin }}/package-lock.json

      - name: Build WordPress Plugin (${{ matrix.plugin }}) using npm
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        id: build-plugin-npm
        run: |
          cd plugins/${{ matrix.plugin }}
          npm install --production
          npm run build

      - name: Upload WordPress Theme (${{ matrix.plugin }}) Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.plugin != 'none' }} # skip this step if no themes are included.
        with:
          path: |
            plugins/${{ matrix.plugin }}/
            !plugins/${{ matrix.plugin }}/**/node_modules
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

  build:
    name: Build Release Zip
    runs-on: ubuntu-latest
    needs: [dependency_setup, theme_setup, plugin_setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Version From Tag
        id: get_version
        uses: linchpin/action-get-latest-tag@v2.0.0
        with:
          semver_only: true

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./build
          merge-multiple: true # Download all artifacts into the same directory

      - name: Clean Build Files/Folders
        id: clean_build_ff
        run: |
          mkdir -p ./build/.deployment/
          cd ./build/.deployment/
          wget -O cleanup.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/cleanup.sh
          chmod +x ./cleanup.sh
          sh ./cleanup.sh
          cd ../../
          rm -rf ./build/.deployment/

      - name: Combine Assets for Release
        id: compression
        run: |
          zip -r release.zip ./build

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.zip
          retention-days: 1 # since we keep a release we do not need to store an artifact too long

      - name: Upload files to the Release Tag
        uses: svenstaro/upload-release-action@2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release.zip
          tag: ${{ steps.get_version.outputs.tag }}
          asset_name: release.zip
          overwrite: true

      # Latest changelog entry is based on version. If not found, fall back to the last version
      - name: Get Latest CHANGELOG.md Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ steps.version.outputs.tag }}
          path: ./build/CHANGELOG.md

      - name: Attach Release Assets
        id: create_release
        if: ${{ ! inputs.skip_github_release && startsWith( github.ref, 'refs/tags/' ) }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          generate_release_notes: true
          body: |
            ${{ steps.changelog_reader.outputs.changes }}
          draft: false
          prerelease: false
          files: release.zip
