name: Deploy to Cloudways

on:
  workflow_call:
    inputs:
      deployment_path:
        description: "Provide if the deployment path is non standard"
        required: false
        default: "~/private_html/releases"
        type: string
      deployment_id:
        description: "The deployment ID from previous jobs"
        required: true
        type: string
      workflow_run_id:
        description: "Workflow Run ID to get artifacts from"
        required: true
        type: string
      # @todo do a backup during the deployment process
      do_backup:
        description: "Backup the current site before deploying"
        required: false
        default: false
        type: boolean
      environment:
        description: "The environment we are pushing to"
        required: true
        default: "staging"
        type: string
      inherit_build:
        description: "This allows projects with multiple deployments to share a build from another job, it must be provided a job ID"
        required: false
        type: string

jobs:
  deploy:
    name: To ${{ vars.HOST }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Deployment In Progress
        id: in_progress_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment_id }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: "release"
          path: ./

      - name: Generate release zip
        id: folder
        run: |
          echo "folder=$(date +'%s')" >> $GITHUB_OUTPUT

      - name: Configure SSH Connection with Cloudways
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'key' }} # Default for Cloudways is an SSH Key
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          SSH_KEY_PRIVATE_PATH="$SSH_PATH/github_action"
          mkdir "$SSH_PATH"
          ssh-keyscan -t rsa "$SSH_HOST" >> "$KNOWN_HOSTS_PATH"
          #Copy Secret Keys to container
          echo "$SSH_KEY" > "$SSH_KEY_PRIVATE_PATH"

          chmod 700 "$SSH_PATH"
          chmod 644 "$KNOWN_HOSTS_PATH"
          chmod 600 "$SSH_KEY_PRIVATE_PATH"

          cat >>~/.ssh/config <<END
          Host cloudways
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile $SSH_KEY_PRIVATE_PATH
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Configure SSH Connection with Cloudways
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'pass' }} # Cloudways Autonomous uses a password for SSH
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          mkdir -p "$SSH_PATH"
          ssh-keyscan -t rsa "$SSH_HOST" >> "$KNOWN_HOSTS_PATH"

          chmod 700 "$SSH_PATH"
          chmod 644 "$KNOWN_HOSTS_PATH"

          cat >>~/.ssh/config <<END
          Host cloudways
            HostName $SSH_HOST
            User $SSH_USER
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Upload Assets
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'key' }}
        id: upload_assets
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          SSH_KEY_PRIVATE_PATH="$SSH_PATH/github_action"
          mv ./release.zip ./${{ steps.folder.outputs.folder }}.zip
          ssh cloudways "mkdir -p ${{ inputs.deployment_path }}"
          rsync --rsh="ssh -v -p 22 -i $SSH_KEY_PRIVATE_PATH -o StrictHostKeyChecking=no" -zrxc --delete "${{ steps.folder.outputs.folder }}.zip" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ inputs.deployment_path }}"

      - name: Upload Assets with Password
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'pass' }}
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          mv ./release.zip ./${{ steps.folder.outputs.folder }}.zip
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> "$KNOWN_HOSTS_PATH"
          chmod 700 "$SSH_PATH"
          chmod 644 "$KNOWN_HOSTS_PATH"
          sshpass -p "${{ secrets.SSH_PASS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ inputs.deployment_path }}"
          sshpass -p "${{ secrets.SSH_PASS }}" rsync --rsh="ssh -o StrictHostKeyChecking=no" -zrxc --delete --no-perms --no-times "${{ steps.folder.outputs.folder }}.zip" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ inputs.deployment_path }}"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PASSWORD: ${{ secrets.SSH_PASS }}

      - name: Remote - Run Scripts
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'key' }}
        id: execute_bash
        run: |
          ssh cloudways "rm -rf ${{ inputs.deployment_path }}/release"
          ssh cloudways "unzip -o -q ${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}.zip -d ${{ inputs.deployment_path }}"
          ssh cloudways "mkdir -p ${{ inputs.deployment_path }}/release/.deployment"
          ssh cloudways "cd ${{ inputs.deployment_path }}/release/.deployment && wget -O entrypoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/cloudways-entrypoint.sh && chmod +x ./entrypoint.sh && bash ./entrypoint.sh"

      - name: Remote - Run Scripts with Password
        if: ${{ vars.DEPLOYMENT_AUTH_TYPE == 'pass' }}
        id: execute_bash_pass
        run: |
          sshpass -p "${{ secrets.SSH_PASS }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm -rf ${{ inputs.deployment_path }}/release"
          sshpass -p "${{ secrets.SSH_PASS }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "unzip -o -q ${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}.zip -d ${{ inputs.deployment_path }}"
          sshpass -p "${{ secrets.SSH_PASS }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ inputs.deployment_path }}/release/.deployment"
          sshpass -p "${{ secrets.SSH_PASS }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ inputs.deployment_path }}/release/.deployment && wget -O entrypoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/cloudways-entrypoint.sh && chmod +x ./entrypoint.sh && bash ./entrypoint.sh"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PASSWORD: ${{ secrets.SSH_PASS }}

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment_id }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment_id }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
