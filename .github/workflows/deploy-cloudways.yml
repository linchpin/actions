name: Deploy to Cloudways

on:
  workflow_call:
    inputs:
      host_ip:
        description: 'IP Address of the host server'
        required: true
        type: string
      site_url:
        description: 'The site url we are deploying to (full url)'
        required: true
        type: string
#      environment:
#        description: 'The environment we are deploying to (production, staging, dev)'
#        required: false,
#        default: 'staging'
#        type: string
#      branch:
#        description: 'The branch we are deploying to'
#        required: true,
#        default: 'staging'
#        type: string
      deployment:
        description: 'The deployment ID from previous jobs'
        required: true
        type: string
      deployment_path:
        description: 'Provide if the deployment path is non standard'
        required: false
        type: string
#      workflow_run_id:
#        description: 'Workflow Run ID to get artifacts from'
#        required: true
#        type: string
    secrets:
      deployment_ssh_user:
        description: 'Cloudways SSH User needed for deployment'
        required: true
      deployment_ssh_key:
        description: 'Cloudways SSH Key needed for deployment'
        required: true

jobs:
  deploy:
    name: Deployment to WP Engine
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.site_url }}
    steps:
      - name: Set Deployment Status to In Progress
        id: in_progress_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # Download the artifact
      - name: Download artifact
        id: download_artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          commit: ${{ github.event.pull_request.head.sha }}
          branch: ${{ inputs.branch }}
          run_id: $${{ inputs.workflow_run_id }}
          name: release
          path: ./

      - name: Configure SSH Connection with Cloudways
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
          Host cloudways
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.deployment_ssh_user }}
          SSH_KEY: ${{ secrets.deployment_key }}
          SSH_HOST: ${{ inputs.host_ip }}

      - name: Generate release folder name
        id: folder
        run: |
          echo ::set-output name=folder::$(date +'%s')

      - name: Upload Assets
        id: upload_assets
        run: |
          mv release.zip ${{ steps.folder.outputs.folder }}.zip
          ssh cloudways "mkdir -p ${{ inputs.deployment_path }}"
          rsync --rsh="ssh -v -p 22 -i ${SSH_KEY} -o StrictHostKeyChecking=no" -zrxc --delete "./${{ steps.folder.outputs.folder }}.zip" "${{ inputs.deployment_path }}"

      - name: Execute bash scripts on server
        id: execute_bash
        run: |
          ssh cloudways "unzip ${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}.zip -d ${{ inputs.deployment_path }}"
          ssh cloudways "cd ${{ steps.folder.outputs.folder }}/.deployment"
          ssh cloudways "chmod +x entrypoint.sh && sh ./entrypoint.sh"

      - name: Deploy Cleanup
        run: |
          ssh cloudways "rm -rf ${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}/.deployment"
          ssh cloudways "rm -rf ${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}.zip

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ needs.preflight.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
