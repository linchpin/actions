name: Continue Deploy to Pressable from API Call

on:
  workflow_call:
    inputs:
      deployment_path:
        description: "Provide if the deployment path is non standard"
        required: false
        default: "/tmp/releases"
        type: string
      deployment_id:
        description: "The deployment ID from previous jobs"
        required: true
        type: string
      workflow_run_id:
        description: "Workflow Run ID to get artifacts from"
        required: true
        type: string
      environment:
        description: "The environment to deploy to"
        required: true
        default: "staging"
        type: string
      inherit_build:
        description: "This allows projects with multiple deployments to share a build from another job, it must be provided a job ID"
        required: false
        type: string

jobs:
  deploy:
    name: To ${{ vars.HOST }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Authenticate Pressable API
        id: authenticate
        run: |
          response=$(curl --location --request POST 'https://my.pressable.com/auth/token' \
          --form 'grant_type="client_credentials"' \
          --form 'client_id="${{ secrets.PRESSABLE_API_CLIENT_ID }}"' \
          --form 'client_secret="${{ secrets.PRESSABLE_API_CLIENT_SECRET }}"')
          access_token=$(echo $response | jq -r '.access_token')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Download All Artifacts # Download our artifacts, may need to pass in the workflow_run_id
        uses: actions/download-artifact@v4
        id: download
        with:
          name: "release"
          path: ./release

      - name: Generate release zip
        id: folder
        run: |
          ls -all
          echo "folder=$(date +'%s')" >> $GITHUB_OUTPUT

      - name: Configure SSH Connection with Pressable
        if: ${{ secrets.SSH_USER && secrets.SSH_HOST}}
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          SSH_KEY_PRIVATE_PATH="$SSH_PATH/github_action"
          mkdir -p "$SSH_PATH"
          mkdir -p "$SSH_PATH/ctl"
          ssh-keyscan -t rsa "${{ secrets.SSH_HOST }}" >> "$KNOWN_HOSTS_PATH"
          echo "${{ secrets.SSH_KEY }}" > "$SSH_KEY_PRIVATE_PATH"
          
          chmod 700 "$SSH_PATH"
          chmod 644 "$KNOWN_HOSTS_PATH"
          chmod 600 "$SSH_KEY_PRIVATE_PATH"
          
          cat >>~/.ssh/config <<END
            Host pressable
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile $SSH_KEY_PRIVATE_PATH
            StrictHostKeyChecking no
            ControlMaster auto
            ControlPath $SSH_PATH/ctl/%C
          END
        shell: bash

      - name: Upload Assets
        id: upload_assets
        run: |
          cd ./release
          zip -r $GITHUB_WORKSPACE/${{ steps.folder.outputs.folder }}.zip ./
          ssh pressable "mkdir -p ${{ inputs.deployment_path }}/"
          cd $GITHUB_WORKSPACE
          rsync -e "ssh -p 22" -W --progress "${{ steps.folder.outputs.folder }}.zip" pressable:${{ inputs.deployment_path }}"

      - name: Enable Maintenance Mode
        if: ${{ steps.authenticate.outputs.access_token }} # make sure we have an access token
        run: |
          curl --location --request PUT 'https://my.pressable.com/v1/sites/${{ vars.SITE_ID }}/maintenance-mode' \
          --header 'Authorization: Bearer ${{ github.env.ACCESS_TOKEN }}' \

      - name: Execute Commands On Server
        id: execute_bash
        run: |
          ssh pressable "cd ${{ inputs.deployment_path }}/ && wget -O ./entrypoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/pressable-entrypoint.sh && chmod +x ./entrypoint.sh && bash ./entrypoint.sh ${{ steps.folder.outputs.folder }}"

  # Loop through all plugins passed from var.PLUGINS
  plugin_install:
    name: WordPress Plugin Install(s)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: deploy
    steps:
      # When installing the plugins we only need the lock file
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: "build"
          sparse-checkout: |
            composer.lock
          sparse-checkout-cone-mode: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ vars.PHP_VERSION }}

      # See about handling this with the API instead of SSH commands
      - name: Remote Plugin Install
        if: ${{ vars.REMOTE_PLUGIN_INSTALL != 'false' }}
        id: parse_composer_lock
        shell: bash
        run: |
          wget -O remote-plugin-install.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/remote-plugin-install.sh
          chmod +x ./remote-plugin-install.sh
          bash ./remote-plugin-install.sh ${{ vars.SITE_ID }} ${{ secrets.SATISPRESS_USER }} ${{ secrets.SATISPRESS_PASSWORD }}

  status:
    name: Deploy Status
    runs-on: ubuntu-latest
    needs: [deploy] # @todo when uncommenting above also add to needs array plugin_install
    steps:
      - name: Configure SSH Connection with Pressable
        if: ${{ secrets.SSH_USER && secrets.SSH_HOST}}
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          SSH_KEY_PRIVATE_PATH="$SSH_PATH/github_action"
          mkdir -p "$SSH_PATH"
          mkdir -p "$SSH_PATH/ctl"
          ssh-keyscan -t rsa "${{ secrets.SSH_HOST }}" >> "$KNOWN_HOSTS_PATH"
          echo "${{ secrets.SSH_KEY }}" > "$SSH_KEY_PRIVATE_PATH"
          
          chmod 700 "$SSH_PATH"
          chmod 644 "$KNOWN_HOSTS_PATH"
          chmod 600 "$SSH_KEY_PRIVATE_PATH"
          
          cat >>~/.ssh/config <<END
            Host pressable
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile $SSH_KEY_PRIVATE_PATH
            StrictHostKeyChecking no
            ControlMaster auto
            ControlPath $SSH_PATH/ctl/%C
          END
        shell: bash

      - name: Cleanup Maintenance
        id: cleanup_maintenance
        run: |
          ssh pressable "cd ${{ inputs.deployment_path }}/release/.deployment/ && wget -O endpoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/pressable-endpoint.sh && chmod +x ./endpoint.sh && bash ./endpoint.sh"

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment_id }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Cleanup Artifacts
        if: ${{ success() }}
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ format( 'composer-{0}', inputs.environment ) }}
          failOnError: false # If the file doesn't exist it's ok to fail silently

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment_id }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
