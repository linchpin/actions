name: Build Project

on:
  workflow_call:
    inputs:
      themes: # A JSON formatted array of theme folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-mmxxii"]'
        default: '["none"]'
        required: false
        type: string
      plugins: # A JSON formatted array of plugins folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-functionality"]'
        default: '["none"]'
        required: false
        type: string
      site_url:
        description: 'The site url we are deploying to (full url)'
        required: true
        type: string
      environment:
        description: 'The environment we are deploying to (production, staging, dev)'
        default: 'staging'
        required: false
        type: string
      branch:
        description: 'The branch we are working out of'
        default: 'staging'
        required: false
        type: string
      php_version:
        description: 'PHP version used during build (Default 7.4.x)'
        default: '7.4'
        required: false
        type: string
      node_version:
        description: 'Node version used during build (Default 16.x)'
        default: 18
        required: false
        type: number
      theme_package_manager:
        description: 'Package manager npm/yarn'
        default: 'yarn'
        type: string
      package_manager:
        description: 'Package manager npm/yarn'
        default: 'yarn'
        type: string
      plugin_package_manager:
        description: 'Package manager npm/yarn'
        default: 'npm'
        type: 'string'
      remote_plugin_install:
        description: 'Remotely install plugins instead of using composer'
        required: false
        default: false
        type: boolean
      build_theme_js:
        description: 'Skip building theme js (typically for older build process, grunt, bower, etc)'
        default: false
        type: boolean
        required: false
      theme_uses_composer:
        description: 'Use composer to install dependencies for your functionality plugin'
        default: false
        type: boolean
        required: false
      plugin_uses_composer:
        description: 'Use composer to install dependencies for your functionality plugin'
        default: false
        type: boolean
        required: false  
    outputs:
      deployment_id:
        description: 'The ID of our deployment'
        value: ${{ jobs.preflight.outputs.deployment_id }}
      workflow_run_id:
        description: 'The ID of the workflow run (used by other shared workflows)'
        value: ${{ jobs.preflight.outputs.run_id }}
      mantle_deploy_id:
        description: 'The ID of the workflow run (used by other shared workflows)'
        value: ${{ jobs.preflight.outputs.mantle_deployment_id }}
    secrets:
      packagist_auth:
        description: 'Authentication for private satis/packagist'
        required: true
      mantle:
        description: 'Secret to deploy to mantle'
        required: false

jobs:
  preflight:
    name: Preflight Setup
    runs-on: ubuntu-latest
    # Map step output to a job output, We have to map to the step "outputs"
    # so we can reference the data in our preflight job as well as outside our preflight job
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      deployment_id: ${{ steps.deployment_data.outputs.deployment_id }}
      deployment_post: ${{ steps.deployment_data.outputs.deployment_post }}
      changelog: ${{ steps.changelog_reader.outputs.changes }}
      run_id: ${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Current Version
        id: version
        run: echo "current=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v7.0.7

      # Get our changelog if we are a tag and we have a version
      - name: Get Newest Changelog Entry
        if: ${{ steps.branch.outputs.branch.is_tag != 'false' && ( startsWith( steps.branch.outputs.current_branch, 'v1' ) || startsWith( steps.branch.outputs.current_branch, 'v2' ) || startsWith( steps.branch.outputs.current_branch, 'v3' ) || startsWith( steps.branch.outputs.current_branch, 'v4' ) ) }}
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.version.outputs.current }}
          path: ./CHANGELOG.md

      - name: Escape changelog
        id: changelog
        uses: linchpin/escape-markdown-for-json@main
        with:
          markdown: ${{ steps.changelog_reader.outputs.changes }}

      - name: Create Mantle Deployment
        uses: linchpin/send-to-mantle@main
        id: send_to_mantle
        with:
          mantle-uri: "${{ inputs.site_url }}/wp-json/mantle/v1/deployment"
          mantle-secret: "${{ secrets.mantle }}"
          mantle-payload: "{\"action\":\"created\",\"deployment\":{\"task\":\"deploy\",\"payload\":{\"version\":\"${{ steps.version.outputs.current }}\",\"committer\":\"${{ github.actor }}\",\"changelog\":\"${{ steps.changelog.outputs.escaped_markdown }}\"}}}"
          soft-fail: true

      - name: Create GitHub Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ inputs.branch }}
          environment: ${{ inputs.environment }}
          payload: "{\"post_id\":\"${{ fromJson( steps.send_to_mantle.outputs.data ).post_id }}\", \"version\":\"${{ steps.version.outputs.current }}\",\"committer\":\"${{ github.actor }}\",\"changelog\":\"${{ steps.changelog.outputs.escaped_markdown }}\"}"
          mediaType: '{"previews": ["flash", "ant-man"]}'
          required_contexts: '[]'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Deployment Data
        id: deployment_data
        run: |
          echo "mantle_deployment_id=${{ fromJson( steps.send_to_mantle.outputs.data ).post_id }}" >> $GITHUB_OUTPUT
          echo "deployment_id=${{ fromJson( steps.create_deployment.outputs.data ).id }}" >> $GITHUB_OUTPUT

      - name: Set Deployment Status to Pending
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ steps.deployment_data.outputs.deployment_id }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: pending
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  dependency_setup:
    name: Composer
    runs-on: ubuntu-latest
    needs: preflight
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: 'build'

      - name: Authenticate Packagist
        if: ${{ inputs.remote_plugin_install == false }}
        run: echo '${{ secrets.packagist_auth }}' > $GITHUB_WORKSPACE/build/auth.json

      - name: Cache Composer dependencies
        if: ${{ inputs.remote_plugin_install == false }}
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Composer Install
        if: ${{ inputs.remote_plugin_install == false }}
        uses: php-actions/composer@v6
        with:
          working_dir: ./build
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Remove Packagist Authentication
        if: ${{ inputs.remote_plugin_install == false }}
        run: rm -f $GITHUB_WORKSPACE/build/auth.json

      - name: Compress Composer Artifact
        id: composer_compression_artifact
        run: tar -zvcf composer.tar.gz ./build

      - name: Upload Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: composer
          path: composer.tar.gz

  # Loop through all themes passed from inputs.themes
  theme_setup:
    name: Theme(s)
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        theme: ${{ fromJSON( inputs.themes ) }}
    steps:
        # check if we have a theme to build. If None output and skip the rest of the steps.
      - name: Theme Setup
        id: individual_theme
        if: ${{ matrix.theme == 'none' }}
        run: |
          echo "::warning::Skipping Theme Build"

      - name: Checkout code
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/checkout@v3

      - name: Install Theme Composer Dependencies
        if: ${{ matrix.theme != 'none' && inputs.theme_uses_composer == true }} # skip this step if no themes are included or we don't have a composer file
        id: install-theme-composer
        uses: php-actions/composer@v6
        with:
          working_dir: ./themes/${{ matrix.theme }}
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Setup Node.js
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get yarn cache directory path
        if: ${{ matrix.theme != 'none' && inputs.theme_package_manager == 'yarn' }} # skip this step if no themes are included.
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
        
      - name: Get npm cache directory
        id: npm-cache-dir
        if: ${{ matrix.theme != 'none' && inputs.theme_package_manager == 'npm' }} # skip this step if no themes are included.
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache yarn cache
        if: ${{ matrix.theme != 'none' && inputs.theme_package_manager == 'yarn' }} # skip this step if no themes are included.
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Theme with yarn
        if: ${{ matrix.theme != 'none' && inputs.build_theme_js != 'false' && inputs.theme_package_manager == 'yarn' }} # skip this step if no themes are included or we tell it to skip
        id: build-theme
        run: |
          cd themes/${{ matrix.theme }}
          yarn install # @todo exclude dev libraries (make initial non cached build faster)
          yarn build

      - name: Build Theme with npm
        if: ${{ matrix.theme != 'none' && inputs.build_theme_js != 'false' && inputs.theme_package_manager == 'npm' }} # skip this step if no themes are included or we tell it to skip
        id: build-theme-npm
        run: |
          cd themes/${{ matrix.theme }}
          npm install sass-embedded-linux-x64 # sass-embedded dependency required for workflow actions
          npm install # @todo exclude dev libraries (make initial non cached build faster)
          npm run build

      - name: Compress Theme Artifact
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        id: compress_theme_artifact
        run: |
          tar -zcf theme-${{ matrix.theme }}.tar.gz --exclude "node_modules" themes/${{ matrix.theme }}

      - name: Upload Theme
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/upload-artifact@v4
        with:
          name: theme-${{ matrix.theme }}
          path: theme-${{ matrix.theme }}.tar.gz

  # Loop through all plugins passed from input.plugins
  plugin_setup:
    name: Plugin(s)
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        plugin: ${{ fromJSON( inputs.plugins ) }}
    steps:
      # check if we have a plugin to build. If None output and skip the rest of the steps.
      - name: Plugin Setup
        id: individual_plugin
        if: ${{ matrix.plugin == 'none' }}
        run: |
          echo "::warning::Skipping Plugin Build"

      - name: Checkout code
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/checkout@v3

      - name: Setup Node.js
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get yarn cache directory path
        if: ${{ matrix.plugin != 'none' && inputs.plugin_package_manager == 'yarn' }} # skip this step if no plugins are included.
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Get npm cache directory
        id: npm-cache-dir
        if: ${{ matrix.plugin != 'none' && inputs.plugin_package_manager == 'npm' }} # skip this step if no plugins are included.
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache yarn cache
        if: ${{ matrix.plugin != 'none' && inputs.plugin_package_manager == 'yarn' }} # skip this step if no plugins are included.
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Plugin with yarn
        if: ${{ matrix.plugin != 'none' && inputs.plugin_package_manager == 'yarn' }} # skip this step if no plugins are included.
        id: build-plugin
        run: |
          cd plugins/${{ matrix.plugin }}
          yarn install # @todo exclude dev libraries (make initial non cached build faster)
          yarn build
          
      - name: Build Plugin with npm
        if: ${{ matrix.plugin != 'none' && inputs.plugin_package_manager == 'npm' }} # skip this step if no plugins are included.
        id: build-plugin-npm
        run: |
          cd plugins/${{ matrix.plugin }}
          npm install # @todo exclude dev libraries (make initial non cached build faster)
          npm run build

      - name: Install Plugin Composer Dependencies
        if: ${{ matrix.plugin != 'none' && inputs.plugin_uses_composer == true }} # skip this step if no themes are included or we don't have a composer file
        id: install-plugin-composer
        uses: php-actions/composer@v6
        with:
          working_dir: ./plugins/${{ matrix.plugin }}
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Compress Plugin Artifact
        if: ${{ matrix.plugin != 'none' }} # skip this step if no themes are included.
        id: compress_plugin_artifact
        run: |
          tar -zcf plugin-${{ matrix.plugin }}.tar.gz --exclude "node_modules" plugins/${{ matrix.plugin }}

      - name: Upload Plugin
        if: ${{ matrix.plugin != 'none' }} # skip this step if no themes are included.
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.plugin }}
          path: plugin-${{ matrix.plugin }}.tar.gz

  download_assets:
    name: Download Assets
    runs-on: ubuntu-latest
    needs: [dependency_setup, theme_setup, plugin_setup]
    steps:

      - name: Create Download Target Directory
        id: create_download_directory
        run: |
          echo 'Removing "artifact" directory if it exists to prevent collisions when downloading assets'
          rm -f ./artifact
          echo 'Create new empty "artifact" directory for artifact downloads'
          mkdir -p ./artifact

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Extract Artifacts (Composer)
        id: extract_artifacts_composer
        run: |
          tar -xzf ./artifact/composer/composer.tar.gz -C ./

      - name: Extract Artifacts (Themes)
        if: ${{ inputs.themes != '["none"]' }} # skip this step if no themes are included.
        id: extract_artifacts_themes
        run: |
          for file in ./artifact/theme-*/theme-*.tar.gz; do tar -zxf "$file" -C ./build; done

      - name: Extract Artifacts (Plugins)
        if: ${{ inputs.plugins != '["none"]' }} # skip this step if no plugins are included.
        id: extract_artifacts_plugins
        run: |
          for file in ./artifact/plugin-*/plugin-*.tar.gz; do tar -zxf "$file" -C ./build; done

      - name: Clean Build Files/Folders
        id: clean_build_ff
        run: |
          mkdir -p ./build/.deployment/
          cd ./build/.deployment/
          wget -O cleanup.sh https://raw.githubusercontent.com/linchpin/actions/v2/.deployment/cleanup.sh
          chmod +x ./cleanup.sh
          sh ./cleanup.sh ${{ inputs.remote_plugin_install }}
          cd ../../
          rm -rf ./build/.deployment/

      # temp_archive comes from the cleanup_build_ff step
      - name: Create Release Zip
        id: compression
        run: |
          mv temp_archive release
          zip -r release.zip release

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.zip
          retention-days: 1
