name: Build Project

on:
  workflow_call:
    inputs:
      theme: # And array of theme name we need to build
        description: 'The theme foldername to build. Example: linchpin-mmxxii'
        required: true
        type: string
      site_url:
        description: 'The site url we are deploying to (full url)'
        required: true
        type: string
      install_name:
        description: 'The name of the install we are deploying to'
        required: false
        type: string
      environment:
        description: 'The environment we are deploying to (production, staging, dev)'
        required: false,
        default: 'staging'
        type: string
      branch:
        description: 'The branch we are working out of'
        required: false,
        type: string
      php_version:
        description: 'PHP version used during build (Default 7.4.x)'
        default: 7.4
        required: false
        type: number
      node_version:
        desciption: 'Node version used during build (Default 16.x)'
        default: 14
        required: false
        type: number
    outputs:
      deployment_id:
        description: 'The ID of our deployment'
        value: ${{ jobs.preflight.outputs.deployment_id }}
      workflow_run_id:
        description: 'The ID of the workflow run (used by other shared workflows)'
        value: ${{ jobs.preflight.outputs.run_id }}
    secrets:
      packagist_auth:
        description: 'Authentication for private satis/packagist'
        required: true

jobs:
  preflight:
    name: Preflight Setup
    runs-on: ubuntu-latest
    # Map step output to a job output, We have to map to the step "outputs"
    # so we can reference the data in our preflight job as well as outside our preflight job
    outputs:
      branch: ${{ steps.output_data.outputs.branch }}
      deployment_id: ${{ steps.deployment_data.outputs.deployment_id }}
      deployment_post: ${{ steps.deployment_data.outputs.deployment_post }}
      changelog: ${{ steps.changelog_reader.outputs.changes }}
      run_id: ${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Current Version
        id: version
        run: |
          echo ::set-output name=current::${GITHUB_REF#refs/tags/v}

      - name: Get Newest Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ steps.version.outputs.current }}
          path: ./CHANGELOG.md

      - name: Create Mantle Deployment
        uses: linchpin/send-to-mantle@main
        id: send_to_mantle
        with:
          mantle-uri: "${{ inputs.site_url }}/wp-json/mantle/v1/deployment"
          mantle-secret: "${{ secrets.MANTLE_SECRET }}"
          mantle-payload: "{\"action\":\"created\",\"deployment\":{\"task\":\"deploy\",\"payload\":{\"version\":\"${{ steps.version.outputs.current }}\",\"committer\":\"${{ github.actor }}\",\"changelog\":\"${{ steps.changelog_reader.outputs.changes }}\"}}}"
          soft-fail: true

      - name: Create GitHub Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ steps.output_data.outputs.branch }}
          environment: ${{ steps.output_data.outputs.environment }}
          payload: "{\"post_id\":\"${{ fromJson( steps.send_to_mantle.outputs.data ).post_id }}\", \"version\":\"${{ steps.version.outputs.current }}\",\"committer\":\"${{ github.actor }}\",\"changelog\":\"${{ steps.changelog_reader.outputs.changes }}\"}"
          mediaType: '{"previews": ["flash", "ant-man"]}'
          required_contexts: '[]'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Deployment Data
        id: deployment_data
        run: |
          echo "::set-output name=deployment_id::${{ fromJson( steps.create_deployment.outputs.data ).id }}"

      - name: Set Deployment Status to Pending
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ steps.deployment_data.outputs.deployment_id }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: pending
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  dependency_setup:
    name: Setup Composer Dependencies
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: 'build'

      - name: Authenticate Packagist
        run: echo '${{ secrets.packagist_auth }}' > $GITHUB_WORKSPACE/build/auth.json

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Composer Install
        uses: php-actions/composer@v6
        with:
          working_dir: ./build
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Remove Packagist Authentication
        run: rm -f $GITHUB_WORKSPACE/build/auth.json

      - name: Compress Composer Artifact
        id: composer_compression_artifact
        run: |
          tar -zcf composer.tar.gz ./build

      - name: Upload Dependencies
        uses: actions/upload-artifact@v2
        with:
          path: composer.tar.gz

  # Loop through all of the themes passed from inputs.themes
  theme_setup:
    name: Setup Theme(s)
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        theme: ${{ fromJSON( inputs.themes ) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Theme
        id: build-theme
        run: |
          cd themes/${{ matrix.theme }}
          yarn install # @todo exclude dev libraries (make initial non cached build faster)
          yarn build

      - name: Compress Theme Artifact
        id: compress_theme_artifact
        run: |
          tar -zcf theme-${{ matrix.theme }}.tar.gz --exclude "node_modules" themes/${{ matrix.theme }}

      - name: Upload Theme
        uses: actions/upload-artifact@v2
        with:
          path: theme-${{ matrix.theme }}.tar.gz

  build:
    name: Build Deployment Zip
    runs-on: ubuntu-latest
    needs: [ preflight, dependency_setup, theme_setup ]
    steps:

      - name: Download All Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./

      - name: Decompress Composer Artifacts
        id: decompress_composer_artifacts
        run: |
          tar -xzf ./artifact/composer.tar.gz -C ./

      - name: Decompress Theme Artifacts
        id: decompress_theme_artifacts
        run: |
          tar -xzf ./artifact/theme-*.tar.gz -C ./build

      - name: Clean Build Files/Folders
        id: clean_build_ff
        run: |
          cd ./build/.deployment
          chmod +x cleanup.sh
          sh cleanup.sh

      - name: Generate release folder name
        id: folder
        run: |
          echo ::set-output name=folder::$(date +'%s')

      # temp_archive comes from the cleanup_build_ff step
      - name: Combine Assets for Release
        id: compression
        run: |
          mv temp_archive ${{ steps.folder.outputs.folder }}
          zip ${{ steps.folder.outputs.folder }}.zip ./${{ steps.folder.outputs.folder }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: ${{ steps.folder.outputs.folder }}.zip
          retention-days: 1
