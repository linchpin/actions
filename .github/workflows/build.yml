name: Build Project v3

on:
  workflow_call:
    inputs:
      themes: # A JSON formatted array of theme folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-mmxxii"]'
        default: '["none"]'
        required: false
        type: string
      plugins: # A JSON formatted array of plugins folder name(s) we need to build
        description: 'A JSON formatted array of plugin folder name(s) to build. Example: ["linchpin-functionality"]'
        default: '["none"]'
        required: false
        type: string
      site_url:
        description: 'The site url we are deploying to (full url)'
        required: true
        type: string
      environment:
        description: 'The environment we are deploying to (production, staging, dev)'
        default: 'staging'
        required: false
        type: string
      branch:
        description: 'The branch we are working out of'
        default: 'staging'
        required: false
        type: string
      php_version:
        description: 'PHP version used during build (Default 7.4.x)'
        default: '8.2'
        required: false
        type: string
      node_version:
        description: 'Node version used during build (Default 16.x)'
        default: 20
        required: false
        type: number
      remote_plugin_install:
        description: 'Remotely install plugins instead of using composer'
        required: false
        default: false
        type: boolean
      build_theme_js:
        description: 'Skip building theme js (typically for older build process, grunt, bower, etc)'
        default: false
        type: boolean
        required: false
      theme_uses_composer:
        description: 'Use composer to install dependencies for your functionality plugin'
        default: false
        type: boolean
        required: false
      plugin_uses_composer:
        description: 'Use composer to install dependencies for your functionality plugin'
        default: false
        type: boolean
        required: false  
    outputs:
      deployment_id:
        description: 'The ID of our deployment'
        value: ${{ jobs.preflight.outputs.deployment_id }}
      workflow_run_id:
        description: 'The ID of the workflow run (used by other shared workflows)'
        value: ${{ jobs.preflight.outputs.run_id }}
    secrets:
      packagist_auth:
        description: 'Authentication for private satis/packagist'
        required: true

jobs:
  preflight:
    name: Preflight Setup
    runs-on: ubuntu-latest
    # Map step output to a job output, We have to map to the step "outputs"
    # so we can reference the data in our preflight job as well as outside our preflight job
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      deployment_id: ${{ steps.deployment_data.outputs.deployment_id }}
      changelog: ${{ steps.changelog_reader.outputs.changes }}
      run_id: ${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Current Version
        id: version
        run: echo "current=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v7.0.7

      # Get our changelog if we are a tag and we have a version
      - name: Get Newest Changelog Entry
        if: ${{ steps.branch.outputs.branch.is_tag != 'false' && ( startsWith( steps.branch.outputs.current_branch, 'v1' ) || startsWith( steps.branch.outputs.current_branch, 'v2' ) || startsWith( steps.branch.outputs.current_branch, 'v3' ) || startsWith( steps.branch.outputs.current_branch, 'v4' ) ) }}
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.version.outputs.current }}
          path: ./CHANGELOG.md

      - name: Escape changelog
        id: changelog
        uses: linchpin/escape-markdown-for-json@main
        with:
          markdown: ${{ steps.changelog_reader.outputs.changes }}

      - name: Create GitHub Deployment
        id: create_deployment
        uses: octokit/request-action@v2
        with:
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ inputs.branch }}
          environment: ${{ inputs.environment }}
          payload: "{\"version\":\"${{ steps.version.outputs.current }}\",\"committer\":\"${{ github.actor }}\",\"changelog\":\"${{ steps.changelog.outputs.escaped_markdown }}\"}"
          required_contexts: '[]'
        env:
          GITHUB_TOKEN: "${{ secrets.GH_BOT_TOKEN }}"

      - name: Set Deployment Status to Pending
        id: start_deployment
        uses: octokit/request-action@v2
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ steps.create_deployment.outputs.deployment_id }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: pending
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  dependency_setup:
    name: Composer
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: 'build'

      - name: Authenticate Packagist
        if: ${{ inputs.remote_plugin_install == false }}
        run: echo '${{ secrets.packagist_auth }}' > $GITHUB_WORKSPACE/build/auth.json

      - name: Cache Composer dependencies
        if: ${{ inputs.remote_plugin_install == false && hashFiles( './build/composer') }}
        uses: actions/cache@v4
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Composer Install
        if: ${{ inputs.remote_plugin_install == false }}
        uses: php-actions/composer@v6
        with:
          working_dir: ./build
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Remove Packagist Authentication
        if: ${{ inputs.remote_plugin_install == false }}
        run: rm -f $GITHUB_WORKSPACE/build/auth.json

      - name: Upload Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: composer
          path: |
            ./build
            !./build/**/node_modules
            !./build/auth.json
            !./build/**/.git
          retention-days: 1

  # Loop through all themes passed from inputs.themes
  theme_setup:
    name: Theme(s)
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        theme: ${{ fromJSON( inputs.themes ) }}
    steps:
        # check if we have a theme to build. If None output and skip the rest of the steps.
      - name: Theme Setup
        id: individual_theme
        if: ${{ matrix.theme == 'none' }}
        run: |
          echo "::warning::Skipping Theme Build"

      - name: Checkout code
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/checkout@v4

      - name: Install Theme Composer Dependencies
        if: ${{ matrix.theme != 'none' && inputs.theme_uses_composer == true && hashFiles(format('themes/{0}/composer.lock', matrix.theme)) }} # skip this step if no themes are included or we don't have a composer file
        id: install-theme-composer
        uses: php-actions/composer@v6
        with:
          working_dir: ./themes/${{ matrix.theme }}
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Setup Node.js
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
        
      - name: Get npm cache directory
        id: npm-cache-dir
        if: ${{ matrix.theme != 'none' && hashFiles(format('themes/{0}/package-lock.json', matrix.theme)) }}
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Build Theme with npm
        if: ${{ matrix.theme != 'none' && inputs.build_theme_js != 'false' && hashFiles(format('themes/{0}/package-lock.json', matrix.theme)) }} # skip this step if no themes are included or we tell it to skip
        id: build-theme-npm
        run: |
          cd themes/${{ matrix.theme }}
          npm config set cache $(npm config get cache)
          npm install --production
          npm run build

      - name: Upload Theme
        if: ${{ matrix.theme != 'none' }} # skip this step if no themes are included.
        uses: actions/upload-artifact@v4
        with:
          name: theme-${{ matrix.theme }}
          path: themes/${{ matrix.theme }}
          retention-days: 1

  # Loop through all plugins passed from input.plugins
  plugin_setup:
    name: Plugin(s)
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        plugin: ${{ fromJSON( inputs.plugins ) }}
    steps:
      # check if we have a plugin to build. If None output and skip the rest of the steps.
      - name: Plugin Setup
        id: individual_plugin
        if: ${{ matrix.plugin == 'none' }}
        run: |
          echo "::warning::Skipping Plugin Build"

      - name: Setup Node.js
        if: ${{ matrix.plugin != 'none' }} # skip this step if no plugins are included.
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        if: ${{ matrix.plugin != 'none'  }} # skip this step if no plugins are included.
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
          
      - name: Build Plugin with npm
        if: ${{ matrix.plugin != 'none' && hashFiles(format('themes/{0}/package-lock.json', matrix.plugin)) }} # skip this step if no plugins are included.
        id: build-plugin-npm
        run: |
          cd plugins/${{ matrix.plugin }}
          npm config set cache $(npm config get cache)
          npm install # @todo exclude dev libraries (make initial non cached build faster)
          npm run build --production

      - name: Install Plugin Composer Dependencies
        if: ${{ matrix.plugin != 'none' && inputs.plugin_uses_composer == true && hashFiles(format('themes/{0}/composer.lock', matrix.plugin)) }} # skip this step if no themes are included or we don't have a composer file
        id: install-plugin-composer
        uses: php-actions/composer@v6
        with:
          working_dir: ./plugins/${{ matrix.plugin }}
          dev: no
          php_version: ${{ inputs.php_version }}

      - name: Upload Plugin
        if: ${{ matrix.plugin != 'none' }} # skip this step if no themes are included.
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.plugin }} 
          path: plugin/${{ matrix.plugin }}
          retention-days: 1

  build:
    name: Zip
    runs-on: ubuntu-latest
    needs: [preflight,dependency_setup,theme_setup,plugin_setup]
    steps:
      - name: Download All Artifacts
        id: artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact
          merge-multiple: true

      - name: Clean Build Files/Folders
        id: clean_build_ff
        run: |
          mkdir -p ./build/.deployment/
          cd ./build/.deployment/
          wget -O cleanup.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/cleanup.sh
          chmod +x ./cleanup.sh
          sh ./cleanup.sh ${{ inputs.remote_plugin_install }}
          cd ../../
          rm -rf ./build/.deployment/

      # temp_archive comes from the cleanup_build_ff step
      - name: Create Release Zip
        id: compression
        run: |
          mv temp_archive release
          zip -r release.zip release

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.zip
          retention-days: 1
