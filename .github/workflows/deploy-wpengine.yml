name: Deploy to WP Engine

on:
  workflow_call:
    inputs:
      deployment_path:
        description: "Provide if the deployment path is non standard"
        required: false
        default: "_wpeprivate/releases"
        type: string
      deployment_id:
        description: "The deployment ID from previous jobs"
        required: true
        type: string
      workflow_run_id:
        description: "Workflow Run ID to get artifacts from"
        required: true
        type: string
      do_backup:
        # @todo implement remote backups on WP Engine
        description: "Backup the current site before deploying"
        required: false
        default: false
        type: boolean
      environment:
        description: "The Environment to deploy and grab env.vars from"
        required: true
        type: string  
      inherit_build:
        description: "This allows projects with multiple deployments to share a build from another job, it must be provided a job ID"
        required: false
        type: string

jobs:
  deploy:
    name: To ${{ vars.HOST }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Deployment In Progress
        id: in_progress_deployment
        uses: octokit/request-action@v2
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: "release"
          path: ./

      - name: Generate release zip
        id: folder
        run: |
          echo "folder=$(date +'%s')" >> $GITHUB_OUTPUT

      - name: Configure SSH Connection with WP Engine
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_user: ${{ vars.INSTALL_NAME }}
          ssh_key: ${{ secrets.SSH_KEY }}
          ssh_host: "${{ vars.INSTALL_NAME }}.ssh.wpengine.net"

      - name: Upload Assets
        id: upload_assets
        run: |
          mv ./release.zip ./${{ steps.folder.outputs.folder }}.zip
          ssh wpengine "mkdir -p ~/sites/${{ vars.INSTALL_NAME }}/${{ inputs.deployment_path }}/"
          rsync -e "ssh -p 22" -W --progress "${{ steps.folder.outputs.folder }}.zip" wpengine:~/sites/"${{ vars.INSTALL_NAME }}"/"${{ inputs.deployment_path }}"

      - name: Execute Commands On Server
        id: execute_bash
        run: |
          ssh wpengine "cd ~/sites/${{ vars.INSTALL_NAME }}/${{ inputs.deployment_path }}/ && wget -O ./entrypoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/wpengine-entrypoint.sh && chmod +x ./entrypoint.sh && bash ./entrypoint.sh ${{ steps.folder.outputs.folder }}"

      # When installing the plugins we only need the lock file
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: "build"
          sparse-checkout: |
            composer.lock
          sparse-checkout-cone-mode: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ vars.PHP_VERSION }}

      - name: Configure SSH Connection with ${{ vars.HOST }}
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_user: ${{ vars.INSTALL_NAME }}
          ssh_key: ${{ secrets.SSH_KEY }}
          ssh_host: "${{ vars.INSTALL_NAME }}.ssh.wpengine.net"

      - name: Remote Plugin Install
        if: ${{ vars.REMOTE_PLUGIN_INSTALL != false }}
        id: parse_composer_lock
        shell: bash
        run: |
          wget -O remote-plugin-install.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/remote-plugin-install.sh
          chmod +x ./remote-plugin-install.sh
          bash ./remote-plugin-install.sh ${{ vars.INSTALL_NAME }} ${{ secrets.SATISPRESS_USER }} ${{ secrets.SATISPRESS_PASSWORD }}

      - name: Configure SSH Connection with WP Engine
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_host: "${{ vars.INSTALL_NAME }}.ssh.wpengine.net"
          ssh_user: ${{ vars.INSTALL_NAME }}
          ssh_key: ${{ secrets.SSH_KEY }}

      - name: Cleanup Maintenance
        id: cleanup_maintenance
        run: |
          ssh wpengine "cd ~/sites/${{ vars.INSTALL_NAME }}/${{ inputs.deployment_path }}/release/.deployment/ && wget -O endpoint.sh https://raw.githubusercontent.com/linchpin/actions/v3/.deployment/wpengine-endpoint.sh && chmod +x ./endpoint.sh && bash ./endpoint.sh"

      # - name: Clear Page and Object Cache
      # if: ${{ always() && 'production' == vars.ENVIRONMENT }}
      # run: |
      # ssh wpengine "cd ~/sites/${{ vars.INSTALL_NAME }} && wp cache flush && wp page-cache flush"

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ vars.ENVIRONMENT }}
          environment_url: ${{ vars.SITE_URL }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
