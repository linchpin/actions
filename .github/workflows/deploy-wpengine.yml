name: Deploy to WP Engine

on:
  workflow_call:
    inputs:
      install_name:
        description: 'The name of the install on WP Engine we are deploying to'
        required: true
        type: string
      site_url:
        description: 'The site url we are deploying to (full url)'
        required: true
        type: string
      environment:
        description: 'The environment we are deploying to (production, staging, dev)'
        required: false
        default: 'staging'
        type: string
      branch:
        description: 'The branch we are deploying to'
        required: false
        default: 'staging'
        type: string
      deployment:
        description: 'The deployment ID from previous jobs'
        required: true
        type: string
      deployment_path:
        description: 'Provide if the deployment path is non standard'
        required: false
        default: '_wpeprivate/releases'
        type: string
      workflow_run_id:
        description: 'Workflow Run ID to get artifacts from'
        required: true
        type: string
      remote_plugin_install:
        description: 'Remotely install plugins instead of using composer'
        required: false
        default: false
        type: boolean
    secrets:
      deployment_ssh_key:
        description: 'WP Engine SSH Key needed for deployment'
        required: true
      gh_bot_token:
        description: 'Bot Access to Private repo'
        required: true

jobs:
  deploy:
    name: To WP Engine
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.site_url }}
    outputs:
      wordpress_plugins:  ${{steps.output_wordpress.outputs.plugins}} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Current Version
        id: version
        run: echo "current=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v7
    
      - name: Deployment In Progress
        id: in_progress_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        id: download
        with:
          name: 'release'
          path: ./

      - name: Generate release zip
        id: folder
        run: echo "folder=$(date +'%s')" >> $GITHUB_OUTPUT        

      - name: Configure SSH Connection with WP Engine
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_user: ${{ inputs.install_name }}
          ssh_key: ${{ secrets.deployment_ssh_key }}
          ssh_host: "${{ inputs.install_name }}.ssh.wpengine.net"

      - name: Upload Assets
        id: upload_assets
        run: |
          SSH_PATH="$HOME/.ssh"
          KNOWN_HOSTS_PATH="$SSH_PATH/known_hosts"
          SSH_KEY_PRIVATE_PATH="$SSH_PATH/github_action"
          mv ./release.zip ./${{ steps.folder.outputs.folder }}.zip
          ssh wpengine "mkdir -p ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}"
          rsync --rsh="ssh -p 22 -i $SSH_KEY_PRIVATE_PATH -o StrictHostKeyChecking=no" -zrxc --progress "${{ steps.folder.outputs.folder }}.zip" "${{ inputs.install_name }}@${{ inputs.install_name }}.ssh.wpengine.net:~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}"

      - name: Execute bash scripts on server
        id: execute_bash
        run: |
          ssh wpengine "unzip -o -q ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}/${{ steps.folder.outputs.folder }}.zip -d ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}"
          ssh wpengine "mkdir -p ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}/release/.deployment/"
          ssh wpengine "cd ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}/release/.deployment/ && wget -O entrypoint.sh https://raw.githubusercontent.com/linchpin/actions/main/.deployment/wpengine-entrypoint.sh && chmod +x ./entrypoint.sh && bash ./entrypoint.sh"
          
  # Loop through all themes passed from inputs.themes
  plugin_install:
    name: WordPress Plugin Install(s)
    runs-on: ubuntu-latest
    needs: deploy
    steps:
# May not need this, jq may be installed by default on action environments
#      - name: Install jq
#        if: ${{ inputs.remote_plugin_install != false }}
#        run: sudo apt-get install jq
        
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: 'build'
        
      - name: Get WordPress plugins and themes for install
        if: ${{ inputs.remote_plugin_install != false }}
        id: parse_composer_lock
        run: |
          output_data="["
          # Read the composer.lock file and loop through each package
          while IFS= read -r package; do
            # Extract the name, type, and version from the package
            name=$(echo "$package" | jq -r '.name')
            type=$(echo "$package" | jq -r '.type')
            version=$(echo "$package" | jq -r '.version')

            # Check if the type is wordpress-plugin or wordpress-theme
            if [[ "$type" == "wordpress-plugin" || "$type" == "wordpress-theme" ]]; then
              # Get the slug by splitting the name at the /
              slug=${name#*/}

              # Add the slug, type, and version to the output data
              output_data+="$(jq -n --arg slug "$slug" --arg type "$type" --arg version "$version" '{slug: $slug, type: $type, version: $version}'),"
            fi
          done < <(jq -c '.packages[]' ./build/composer.lock)

          # Remove the trailing comma and close the JSON array
          output_data="${output_data%,}]"

          # Set the output variable
          echo "parsed_data=$output_data" >> $GITHUB_OUTPUT

          # Remove the trailing comma and close the JSON array
          output_data="${output_data%,}]"
          echo "output_data: $output_data" # DEBUG

          # Set the output variable
          echo "parsed_data=$output_data" >> $GITHUB_OUTPUT

      - name: Configure SSH Connection with WP Engine
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_user: ${{ inputs.install_name }}
          ssh_key: ${{ secrets.deployment_ssh_key }}
          ssh_host: "${{ inputs.install_name }}.ssh.wpengine.net" 

      - name: Install WordPress plugins remotely
        run: |
          parsed_data='${{ steps.parse_composer_lock.outputs.parsed_data }}'

          # Loop through the JSON array
          echo "$parsed_data" | jq '.[]' | while read -r item; do
            slug=$(echo "$item" | jq -r '.slug')
            type=$(echo "$item" | jq -r '.type')
            version=$(echo "$item" | jq -r '.version')

            # Check if the item is a plugin or theme and set the WP-CLI command accordingly
            if [[ "$type" == "wordpress-plugin" ]]; then
              wp_command="plugin"
            elif [[ "$type" == "wordpress-theme" ]]; then
              wp_command="theme"
            else
              continue
            fi

            # Check if the plugin or theme is installed using WP-CLI
            installed=$(ssh wpengine "wp $wp_command is-installed $slug" && echo "yes" || echo "no")

            # Install or update the plugin or theme based on the check
            if [[ "$installed" == "no" ]]; then
              ssh wpengine "wp $wp_command install $slug --version=$version"
            else
              ssh wpengine "wp $wp_command update $slug --version=$version"
            fi
          done

  status:
    name: Deploy Status
    runs-on: ubuntu-latest
    needs: [deploy, plugin_install]
    steps:
      - name: Configure SSH Connection with WP Engine
        uses: linchpin/actions-wpengine-ssh@main
        with:
          ssh_user: ${{ inputs.install_name }}
          ssh_key: ${{ secrets.deployment_ssh_key }}
          ssh_host: "${{ inputs.install_name }}.ssh.wpengine.net"

      - name: Cleanup Maintenance
        id: cleanup_maintenance
        run: |
          ssh wpengine "cd ~/sites/${{ inputs.install_name }}/${{ inputs.deployment_path }}/release/.deployment/ && wget -O endpoint.sh https://raw.githubusercontent.com/linchpin/actions/feature/maybe-skip-composer/.deployment/wpengine-endpoint.sh && chmod +x ./endpoint.sh && bash ./endpoint.sh"
    
    
    # - name: Clear Page and Object Cache
      # if: ${{ always() && 'production' == inputs.environment }}
      # run: |
        # ssh wpengine "cd ~/sites/${{ inputs.install_name }} && wp cache flush && wp page-cache flush"

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ inputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments/{deployment}/statuses
          repo: ${{ github.repository }}
          deployment: ${{ inputs.deployment }}
          environment: ${{ inputs.environment }}
          environment_url: ${{ needs.preflight.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
